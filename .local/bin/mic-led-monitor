#!/bin/bash
## Daemon script to continuously sync microphone LED with mute state
## Checks every 2 seconds and updates LED if state changes
## Author: Pahasara Dewnith (https://github.com/Pahasara)
LED_PATH="/sys/class/leds/platform::micmute/brightness"
CHECK_INTERVAL=2
LAST_STATE=""
# Function to control microphone LED
control_mic_led() {
    local state=$1
    if [ -w "$LED_PATH" ]; then
        echo "$state" > "$LED_PATH" 2>/dev/null
    elif [ -e "$LED_PATH" ]; then
        # If we don't have write permissions, try with sudo
        echo "$state" | sudo tee "$LED_PATH" > /dev/null 2>&1
    else
        # LED path doesn't exist - log and continue
        echo "$(date): LED path not available" >&2
        return 1
    fi
}
# Function to get current LED state
get_current_led_state() {
    if [ -r "$LED_PATH" ]; then
        cat "$LED_PATH" 2>/dev/null || echo "unknown"
    else
        echo "unknown"
    fi
}
# Function to check mic mute state
check_mic_state() {
    local mic_mute=$(wpctl get-volume @DEFAULT_AUDIO_SOURCE@ 2>/dev/null | grep -q MUTED && echo "muted" || echo "unmuted")
    echo "$mic_mute"
}
# Wait for audio system to be ready
echo "$(date): Waiting for audio system to be ready..."
wait_count=0
max_wait=30
while [ $wait_count -lt $max_wait ]; do
    if wpctl status >/dev/null 2>&1; then
        echo "$(date): Audio system ready after $wait_count seconds"
        break
    fi
    sleep 1
    ((wait_count++))
done
if [ $wait_count -eq $max_wait ]; then
    echo "$(date): Audio system not ready after $max_wait seconds, exiting"
    exit 1
fi
echo "$(date): Starting mic LED monitoring daemon (checking every ${CHECK_INTERVAL}s)"
# Main monitoring loop
while true; do
    # Get current mic mute state
    current_mic_state=$(check_mic_state)

    # Only update LED if state changed
    if [ "$current_mic_state" != "$LAST_STATE" ]; then
        current_led=$(get_current_led_state)

        if [ "$current_mic_state" = "muted" ]; then
            if [ "$current_led" != "1" ]; then
                control_mic_led 1
                echo "$(date): Mic muted - LED turned ON"
            fi
        else
            if [ "$current_led" != "0" ]; then
                control_mic_led 0  
                echo "$(date): Mic unmuted - LED turned OFF"
            fi
        fi

        LAST_STATE="$current_mic_state"
    fi

    sleep $CHECK_INTERVAL
done
